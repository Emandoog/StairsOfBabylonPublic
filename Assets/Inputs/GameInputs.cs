//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""GameActionMap"",
            ""id"": ""320beb96-9f57-4ef3-9d32-273cde9a85f6"",
            ""actions"": [
                {
                    ""name"": ""LMB"",
                    ""type"": ""Button"",
                    ""id"": ""34e4068d-7543-42fe-8475-648c45ec8562"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WaveMarker"",
                    ""type"": ""Button"",
                    ""id"": ""bc1cf1e7-7e9e-43f2-9020-2147a09cfd7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraMovement"",
                    ""type"": ""Button"",
                    ""id"": ""5be77f30-b4d3-4cf4-b24b-a251729b4960"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f749fe6c-9723-472e-8be9-431dca91ea84"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LMB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7ed0489-dbce-4361-87ee-5e4c679a91c3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WaveMarker"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e797b065-9ddb-4f57-9c29-b6c76e4eb553"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameActionMap
        m_GameActionMap = asset.FindActionMap("GameActionMap", throwIfNotFound: true);
        m_GameActionMap_LMB = m_GameActionMap.FindAction("LMB", throwIfNotFound: true);
        m_GameActionMap_WaveMarker = m_GameActionMap.FindAction("WaveMarker", throwIfNotFound: true);
        m_GameActionMap_CameraMovement = m_GameActionMap.FindAction("CameraMovement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameActionMap
    private readonly InputActionMap m_GameActionMap;
    private IGameActionMapActions m_GameActionMapActionsCallbackInterface;
    private readonly InputAction m_GameActionMap_LMB;
    private readonly InputAction m_GameActionMap_WaveMarker;
    private readonly InputAction m_GameActionMap_CameraMovement;
    public struct GameActionMapActions
    {
        private @GameInputs m_Wrapper;
        public GameActionMapActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @LMB => m_Wrapper.m_GameActionMap_LMB;
        public InputAction @WaveMarker => m_Wrapper.m_GameActionMap_WaveMarker;
        public InputAction @CameraMovement => m_Wrapper.m_GameActionMap_CameraMovement;
        public InputActionMap Get() { return m_Wrapper.m_GameActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IGameActionMapActions instance)
        {
            if (m_Wrapper.m_GameActionMapActionsCallbackInterface != null)
            {
                @LMB.started -= m_Wrapper.m_GameActionMapActionsCallbackInterface.OnLMB;
                @LMB.performed -= m_Wrapper.m_GameActionMapActionsCallbackInterface.OnLMB;
                @LMB.canceled -= m_Wrapper.m_GameActionMapActionsCallbackInterface.OnLMB;
                @WaveMarker.started -= m_Wrapper.m_GameActionMapActionsCallbackInterface.OnWaveMarker;
                @WaveMarker.performed -= m_Wrapper.m_GameActionMapActionsCallbackInterface.OnWaveMarker;
                @WaveMarker.canceled -= m_Wrapper.m_GameActionMapActionsCallbackInterface.OnWaveMarker;
                @CameraMovement.started -= m_Wrapper.m_GameActionMapActionsCallbackInterface.OnCameraMovement;
                @CameraMovement.performed -= m_Wrapper.m_GameActionMapActionsCallbackInterface.OnCameraMovement;
                @CameraMovement.canceled -= m_Wrapper.m_GameActionMapActionsCallbackInterface.OnCameraMovement;
            }
            m_Wrapper.m_GameActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LMB.started += instance.OnLMB;
                @LMB.performed += instance.OnLMB;
                @LMB.canceled += instance.OnLMB;
                @WaveMarker.started += instance.OnWaveMarker;
                @WaveMarker.performed += instance.OnWaveMarker;
                @WaveMarker.canceled += instance.OnWaveMarker;
                @CameraMovement.started += instance.OnCameraMovement;
                @CameraMovement.performed += instance.OnCameraMovement;
                @CameraMovement.canceled += instance.OnCameraMovement;
            }
        }
    }
    public GameActionMapActions @GameActionMap => new GameActionMapActions(this);
    public interface IGameActionMapActions
    {
        void OnLMB(InputAction.CallbackContext context);
        void OnWaveMarker(InputAction.CallbackContext context);
        void OnCameraMovement(InputAction.CallbackContext context);
    }
}
